
: -- 10 char-parse drop:2 ; immediate
-- now we have end of line comments

: ( 41 char-parse drop drop ; immediate
( now we have comments )

-- -----------------------------------------------------------------------------
--
--  Data area operations
--
-- -----------------------------------------------------------------------------

: allot ( u -- )  }data + }data& ! ;
: cells ( u -- u )  cell * ;
: ds>data ( w -- )  }data ! cell allot ;
: ds>data:b ( b -- )  }data !:b 1 allot ;

-- -----------------------------------------------------------------------------
--
-- literal booleans
--
-- -----------------------------------------------------------------------------

: true ( -- f )  1 ;
: false ( -- f )  0 ;

-- switches
: on  ( addr -- )  true swap ! ;
: off ( addr -- )  false swap ! ;

-- -----------------------------------------------------------------------------
--
--  Variable access abbreviations
--
-- -----------------------------------------------------------------------------

-- abbreviations
: 1+ ( n -- n ) 1 + ;
: 1- ( n -- n) 1 - ;

-- variable abbreviations
: !+ ( addr -- ) dup ? 1+ swap ! ;
: !- ( addr -- ) dup ? 1- swap ! ;

-- -----------------------------------------------------------------------------
--
--  Literal tokens or compilation
--
-- -----------------------------------------------------------------------------

-- get executon tokens
: ` ( -- xt ) word-parse find-word drop ;
: [`] ( -- ) ` literal ; immediate
: 2literal ( n m -- ) [`] 2lit ds>data ds>data ds>data ;
: compile ( -- ) ` literal [`] ds>data ds>data ; immediate

-- -----------------------------------------------------------------------------
--
--  Generalised flow control
--
-- -----------------------------------------------------------------------------

: create-target ( -- target ) }data ;

: resolve-target-false ( target -- ) compile branch-false ds>data ;
: resolve-target ( target -- ) compile branch ds>data ;

: create-source-false ( -- source ) compile branch-false }data 0 ds>data ;
: create-source ( -- source ) compile branch }data 0 ds>data ;

: resolve-source ( source -- )  }data swap ! ;

-- -----------------------------------------------------------------------------
--
-- Basic flow control
--
-- -----------------------------------------------------------------------------

-- if else endif statements
: if ( -- source ) create-source-false  ; immediate
: else ( source -- source ) create-source swap resolve-source ; immediate
: endif ( source -- ) resolve-source  ; immediate
: do ( -- target ) create-target ; immediate
: repeat ( target source -- ) swap resolve-target resolve-source  ; immediate
: forever ( target -- ) resolve-target ; immediate

-- -----------------------------------------------------------------------------
--
-- Literal characters
--
-- -----------------------------------------------------------------------------

-- characters
: ' ( -- c ) word-parse drop ?:b ;
: ['] ( -- )  ' literal ; immediate

-- print a single character
: emit ( c -- )   }data !:b }data 1 >output ;

-- -----------------------------------------------------------------------------
--
--  Literal strings & printing
--
-- -----------------------------------------------------------------------------

-- when run, this will copy up to " to the data area
-- and push the addr u on the stack
: ]"[ ( -- addr u )
      create-source
        ['] " char-parse 2 -    -- addr (u - 1)
        swap 1+ swap            -- (addr + 1) (u - 1)
        tuck }data              -- u addr u dst
        {mem}>{mem}:b           -- u (dst + u + 1)
        drop                    -- u
        }data swap dup          -- dst u u
        allot                   -- dst u
        rot
      resolve-source 2literal
        ;

-- this is to put a string in the word
: " ( -- )  ]"[ ; immediate

-- print with a newline
: ." ( -- )  ]"[ compile >output 10 literal compile emit ; immediate


-- ---------------------------------------------------------------------------
--
-- Start of Interpret
--
-- ---------------------------------------------------------------------------

-- change immediate mode on or off
: [ immediate-mode on ; immediate
: ] immediate-mode off ;

-- execute
: nop ( -- ) ;
: execute ( xt -- ) [ }data 3 cells + literal ] ! nop ;

: handle-word ( xt im? --  )
      1 = immediate-mode ? or
      if execute else ds>data endif  ;

: handle-number ( n -- )
  immediate-mode ? not if literal endif ;

: interpret-word ( -- refill? )
    word-parse ?dup not if
      drop immediate-mode ?
        if ." ok"
        else ." compiled"
        endif
      true
    else dup:2 find-word ?dup if
      nip:2 handle-word false
    else drop dup:2 ">#  if
      -rot drop:2 handle-number false
    else immediate-mode on drop >output " ? " >output true
    endif
    endif
    endif
    ;

: interpret ( -- )
  do
    interpret-word
    if refill-input drop:2 endif
  forever ;

` interpret &interpret_xt !

-- -----------------------------------------------------------------------------
--
-- End of interpret
--
-- -----------------------------------------------------------------------------

: loaded-bootstrap ( -- ) ." loaded bootstrap" ;
loaded-bootstrap